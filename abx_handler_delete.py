import logging

from aap import Aap

log = logging.getLogger(__name__)


def abx_delete(context: object, inputs: dict):
    """
        This handler DELETES the resources as specified in the inputs.

        Args:
            context: The context object containing information about the ABX event.
            inputs: The inputs provided for the ABX event.
        Returns:
            dict: The outputs generated by the ABX handler.
    """
    log.info(f"Deleting resources for project: {inputs.get('__metadata').get('project')}")

    # Connect to server
    with Aap.from_aria(context=context, inputs=inputs) as aap:

        # Find inventory
        inventory_name = inputs.get('inventory_name')
        log.info(f"Inventory name: '{inventory_name}'")
        aap_inventories = aap.search_inventories(name=inventory_name)

        # Should only find on
        if len(aap_inventories) > 1:
            msg = f"Found multiple inventories with name '{inventory_name}' on server '{aap.base_url}'"
            log.critical(msg)
            raise ValueError(msg)

        # No inventory found
        if not aap_inventories:
            log.warning(f"No inventory found.")
            return {}

        # Delete inventory
        aap_inventory = aap_inventories[0]
        log.info(f"Found inventory at {aap_inventory.url}")
        aap.delete_inventory(inventory=aap_inventory)

        outputs = {
            "operation": "delete",
            "inventory": {
                "id": aap_inventory.id,
                "url": aap_inventory.url,
                "name": aap_inventory.name,
                "variables": aap_inventory.variables,
            },
        }

        return outputs
